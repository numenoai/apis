/* tslint:disable */
/* eslint-disable */
/**
 * Numeno Persona API
 * ### Introduction  Use the Numeno Persona API to create and manage **Personas**.  Evolving a Persona over time is dead-simple: [create a Persona](create-persona), then send natural-language descriptions of your users’ in-app activities to the Persona API. Under the hood, we create a rich set of models of the system that evolve over time.  Then, ask Numeno to personalize some part of your experience using the Persona.  Numeno will use our models to tailor your software to each user’s unique preferences and habits, allowing you to dynamically adjust your offerings.  For example, connect a Persona to the **[Numeno Article Recommender API](https://numeno.ai/wp-content/uploads/docs/artrec/numeno-article-recommender-api)** to generate **Article Feeds** that evolve over time as your Persona evloves with user interaction.  Personas are not limited to modelling users. Posts in a social environment, articles or topics on a content platform, a screen or widget in your UI, a product in your inventory - groups of any of these things – Personas can evolve models of anything in your system!  Get creative!
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@numeno.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
/**
 * Information about the health of a service.
 * @export
 * @interface HealthCheck
 */
export interface HealthCheck {
  /**
   * The status of the API.
   * @type {string}
   * @memberof HealthCheck
   */
  status: HealthCheckStatusEnum
  /**
   * The name of the service.
   * @type {string}
   * @memberof HealthCheck
   */
  service?: string
  /**
   * The version of the API.
   * @type {string}
   * @memberof HealthCheck
   */
  version?: string
  /**
   * The cluster the API is running on.
   * @type {string}
   * @memberof HealthCheck
   */
  cluster?: string
  /**
   * Whether debug mode is enabled or not.
   * @type {boolean}
   * @memberof HealthCheck
   */
  debugMode?: boolean
}

/**
 * @export
 */
export const HealthCheckStatusEnum = {
  Ok: 'ok',
  Degraded: 'degraded',
  Down: 'down',
} as const
export type HealthCheckStatusEnum =
  (typeof HealthCheckStatusEnum)[keyof typeof HealthCheckStatusEnum]

/**
 * Check if a given object implements the HealthCheck interface.
 */
export function instanceOfHealthCheck(value: object): value is HealthCheck {
  if (!('status' in value) || value['status'] === undefined) return false
  return true
}

export function HealthCheckFromJSON(json: any): HealthCheck {
  return HealthCheckFromJSONTyped(json, false)
}

export function HealthCheckFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): HealthCheck {
  if (json == null) {
    return json
  }
  return {
    status: json['status'],
    service: json['service'] == null ? undefined : json['service'],
    version: json['version'] == null ? undefined : json['version'],
    cluster: json['cluster'] == null ? undefined : json['cluster'],
    debugMode: json['debugMode'] == null ? undefined : json['debugMode'],
  }
}

export function HealthCheckToJSON(json: any): HealthCheck {
  return HealthCheckToJSONTyped(json, false)
}

export function HealthCheckToJSONTyped(
  value?: HealthCheck | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    status: value['status'],
    service: value['service'],
    version: value['version'],
    cluster: value['cluster'],
    debugMode: value['debugMode'],
  }
}
