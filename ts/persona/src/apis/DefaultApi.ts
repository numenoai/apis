/* tslint:disable */
/* eslint-disable */
/**
 * Numeno Persona API
 * ### Introduction  Use the Numeno Persona API to create new personas.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@numeno.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
  ErrorResponse,
  HealthCheck,
  Persona,
  PersonaUpdate,
  Personas,
} from '../models/index'
import {
  ErrorResponseFromJSON,
  ErrorResponseToJSON,
  HealthCheckFromJSON,
  HealthCheckToJSON,
  PersonaFromJSON,
  PersonaToJSON,
  PersonaUpdateFromJSON,
  PersonaUpdateToJSON,
  PersonasFromJSON,
  PersonasToJSON,
} from '../models/index'

export interface CreatePersonaRequest {
  personaUpdate: PersonaUpdate
}

export interface DeletePersonaRequest {
  personaId: string
}

export interface GetPersonaByIdRequest {
  personaId: string
}

export interface GetPersonasRequest {
  cursor?: string
  limit?: number
}

export interface UpdatePersonaRequest {
  personaId: string
  personaUpdate: PersonaUpdate
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Create a new persona
   */
  async createPersonaRaw(
    requestParameters: CreatePersonaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Persona>> {
    if (requestParameters['personaUpdate'] == null) {
      throw new runtime.RequiredError(
        'personaUpdate',
        'Required parameter "personaUpdate" was null or undefined when calling createPersona().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Key'] =
        await this.configuration.apiKey('X-Numeno-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/personas`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: PersonaUpdateToJSON(requestParameters['personaUpdate']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PersonaFromJSON(jsonValue),
    )
  }

  /**
   * Create a new persona
   */
  async createPersona(
    requestParameters: CreatePersonaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Persona> {
    const response = await this.createPersonaRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Delete a persona by ID
   */
  async deletePersonaRaw(
    requestParameters: DeletePersonaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['personaId'] == null) {
      throw new runtime.RequiredError(
        'personaId',
        'Required parameter "personaId" was null or undefined when calling deletePersona().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Key'] =
        await this.configuration.apiKey('X-Numeno-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/personas/{personaId}`.replace(
          `{${'personaId'}}`,
          encodeURIComponent(String(requestParameters['personaId'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Delete a persona by ID
   */
  async deletePersona(
    requestParameters: DeletePersonaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deletePersonaRaw(requestParameters, initOverrides)
  }

  /**
   * Get a specific persona by ID
   */
  async getPersonaByIdRaw(
    requestParameters: GetPersonaByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Persona>> {
    if (requestParameters['personaId'] == null) {
      throw new runtime.RequiredError(
        'personaId',
        'Required parameter "personaId" was null or undefined when calling getPersonaById().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Key'] =
        await this.configuration.apiKey('X-Numeno-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/personas/{personaId}`.replace(
          `{${'personaId'}}`,
          encodeURIComponent(String(requestParameters['personaId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PersonaFromJSON(jsonValue),
    )
  }

  /**
   * Get a specific persona by ID
   */
  async getPersonaById(
    requestParameters: GetPersonaByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Persona> {
    const response = await this.getPersonaByIdRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Get a list of all personas
   */
  async getPersonasRaw(
    requestParameters: GetPersonasRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Personas>> {
    const queryParameters: any = {}

    if (requestParameters['cursor'] != null) {
      queryParameters['cursor'] = requestParameters['cursor']
    }

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Key'] =
        await this.configuration.apiKey('X-Numeno-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/personas`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PersonasFromJSON(jsonValue),
    )
  }

  /**
   * Get a list of all personas
   */
  async getPersonas(
    requestParameters: GetPersonasRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Personas> {
    const response = await this.getPersonasRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Check the health of the API
   */
  async healthCheckRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<HealthCheck>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/health`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      HealthCheckFromJSON(jsonValue),
    )
  }

  /**
   * Check the health of the API
   */
  async healthCheck(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<HealthCheck> {
    const response = await this.healthCheckRaw(initOverrides)
    return await response.value()
  }

  /**
   * Update a persona by ID
   */
  async updatePersonaRaw(
    requestParameters: UpdatePersonaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Persona>> {
    if (requestParameters['personaId'] == null) {
      throw new runtime.RequiredError(
        'personaId',
        'Required parameter "personaId" was null or undefined when calling updatePersona().',
      )
    }

    if (requestParameters['personaUpdate'] == null) {
      throw new runtime.RequiredError(
        'personaUpdate',
        'Required parameter "personaUpdate" was null or undefined when calling updatePersona().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Key'] =
        await this.configuration.apiKey('X-Numeno-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/personas/{personaId}`.replace(
          `{${'personaId'}}`,
          encodeURIComponent(String(requestParameters['personaId'])),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: PersonaUpdateToJSON(requestParameters['personaUpdate']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PersonaFromJSON(jsonValue),
    )
  }

  /**
   * Update a persona by ID
   */
  async updatePersona(
    requestParameters: UpdatePersonaRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Persona> {
    const response = await this.updatePersonaRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }
}
