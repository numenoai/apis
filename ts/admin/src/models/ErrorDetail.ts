/* tslint:disable */
/* eslint-disable */
/**
 * Numeno Admin API
 * ## Introduction  Use the Numeno Administration API to create API Keys and set their permissions (which we call Scopes). This API is meant to be used by administrators of your organization.  ## Scopes  Scopes are used to let API Keys access only certain parts of the API.  Scopes are expressed as a string of the form `api:resource:action`.  For example, from the Numeno Article Recommender API (`art-rec`):   - `art-rec:feeds:read` - can read any Feed (eg. `GET` `/feeds`, `/feeds/:id`, `/feeds/:id/streams`, etc.)   - `art-rec:feeds:write` - can write (and read) any Feed   - `art-rec:feeds:*` - can perform any action on Feeds   - `art-rec:*:read` - can read any resource on `art-rec`   - `*:*:*` - can do everything
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@numeno.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
/**
 *
 * @export
 * @interface ErrorDetail
 */
export interface ErrorDetail {
  /**
   * Field where the error occurred (if applicable).
   * @type {string}
   * @memberof ErrorDetail
   */
  field?: string
  /**
   * Description of the error.
   * @type {string}
   * @memberof ErrorDetail
   */
  message?: string
}

/**
 * Check if a given object implements the ErrorDetail interface.
 */
export function instanceOfErrorDetail(value: object): value is ErrorDetail {
  return true
}

export function ErrorDetailFromJSON(json: any): ErrorDetail {
  return ErrorDetailFromJSONTyped(json, false)
}

export function ErrorDetailFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ErrorDetail {
  if (json == null) {
    return json
  }
  return {
    field: json['field'] == null ? undefined : json['field'],
    message: json['message'] == null ? undefined : json['message'],
  }
}

export function ErrorDetailToJSON(json: any): ErrorDetail {
  return ErrorDetailToJSONTyped(json, false)
}

export function ErrorDetailToJSONTyped(
  value?: ErrorDetail | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    field: value['field'],
    message: value['message'],
  }
}
