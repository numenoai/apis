/* tslint:disable */
/* eslint-disable */
/**
 * Numeno Admin API
 * ## Introduction  Use the Numeno Administration API to create API Keys and set their permissions (which we call Scopes). This API is meant to be used by administrators of your organization.  ## Scopes  Scopes are used to let API Keys access only certain parts of the API.  Scopes are expressed as a string of the form `api:resource:action`.  For example, from the Numeno Article Recommender API (`art-rec`):   - `art-rec:feeds:read` - can read any Feed (eg. `GET` `/feeds`, `/feeds/:id`, `/feeds/:id/streams`, etc.)   - `art-rec:feeds:write` - can write (and read) any Feed   - `art-rec:feeds:*` - can perform any action on Feeds   - `art-rec:*:read` - can read any resource on `art-rec`   - `*:*:*` - can do everything
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@numeno.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { KeyInfo } from './KeyInfo'
import {
  KeyInfoFromJSON,
  KeyInfoFromJSONTyped,
  KeyInfoToJSON,
  KeyInfoToJSONTyped,
} from './KeyInfo'

/**
 *
 * @export
 * @interface KeyInfoList
 */
export interface KeyInfoList {
  /**
   *
   * @type {Array<KeyInfo>}
   * @memberof KeyInfoList
   */
  keys: Array<KeyInfo>
  /**
   *
   * @type {string}
   * @memberof KeyInfoList
   */
  cursor?: string
}

/**
 * Check if a given object implements the KeyInfoList interface.
 */
export function instanceOfKeyInfoList(value: object): value is KeyInfoList {
  if (!('keys' in value) || value['keys'] === undefined) return false
  return true
}

export function KeyInfoListFromJSON(json: any): KeyInfoList {
  return KeyInfoListFromJSONTyped(json, false)
}

export function KeyInfoListFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): KeyInfoList {
  if (json == null) {
    return json
  }
  return {
    keys: (json['keys'] as Array<any>).map(KeyInfoFromJSON),
    cursor: json['cursor'] == null ? undefined : json['cursor'],
  }
}

export function KeyInfoListToJSON(json: any): KeyInfoList {
  return KeyInfoListToJSONTyped(json, false)
}

export function KeyInfoListToJSONTyped(
  value?: KeyInfoList | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    keys: (value['keys'] as Array<any>).map(KeyInfoToJSON),
    cursor: value['cursor'],
  }
}
