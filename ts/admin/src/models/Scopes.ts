/* tslint:disable */
/* eslint-disable */
/**
 * Numeno Admin API
 * ## Introduction  Use the Numeno Administration API to create API Keys and set their permissions (which we call Scopes). This API is meant to be used by administrators of your organization.  ## Scopes  Scopes are used to let API Keys access only certain parts of the API.  Scopes are expressed as a string of the form `api:resource:action`.  For example, from the Numeno Article Recommender API (`art-rec`):   - `art-rec:feeds:read` - can read any Feed (eg. `GET` `/feeds`, `/feeds/:id`, `/feeds/:id/streams`, etc.)   - `art-rec:feeds:write` - can write (and read) any Feed   - `art-rec:feeds:*` - can perform any action on Feeds   - `art-rec:*:read` - can read any resource on `art-rec`   - `*:*:*` - can do everything
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@numeno.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
/**
 * Information about the Scopes supported by a service.
 * @export
 * @interface Scopes
 */
export interface Scopes {
  /**
   * List of Scopes supported by a service.
   * @type {Set<string>}
   * @memberof Scopes
   */
  scopes: Set<string>
}

/**
 * Check if a given object implements the Scopes interface.
 */
export function instanceOfScopes(value: object): value is Scopes {
  if (!('scopes' in value) || value['scopes'] === undefined) return false
  return true
}

export function ScopesFromJSON(json: any): Scopes {
  return ScopesFromJSONTyped(json, false)
}

export function ScopesFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Scopes {
  if (json == null) {
    return json
  }
  return {
    scopes: new Set(json['scopes']),
  }
}

export function ScopesToJSON(json: any): Scopes {
  return ScopesToJSONTyped(json, false)
}

export function ScopesToJSONTyped(
  value?: Scopes | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    scopes: Array.from(value['scopes'] as Set<any>),
  }
}
