/* tslint:disable */
/* eslint-disable */
/**
 * Numeno Admin API
 * ## Introduction  Use the Numeno Administration API to create API Keys and set their permissions (which we call Scopes). This API is meant to be used by administrators of your organization.  ## Scopes  Scopes are used to let API Keys access only certain parts of the API.  Scopes are expressed as a string of the form `api:resource:action`.  For example, from the Numeno Article Recommender API (`art-rec`):   - `art-rec:feeds:read` - can read any Feed (eg. `GET` `/feeds`, `/feeds/:id`, `/feeds/:id/streams`, etc.)   - `art-rec:feeds:write` - can write (and read) any Feed   - `art-rec:feeds:*` - can perform any action on Feeds   - `art-rec:*:read` - can read any resource on `art-rec`   - `*:*:*` - can do everything
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@numeno.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
/**
 *
 * @export
 * @interface KeyUpdate
 */
export interface KeyUpdate {
  /**
   * The Scopes to add to the Key, if any. Cannot overlap with `removeScopes`.
   * @type {Array<string>}
   * @memberof KeyUpdate
   */
  addScopes?: Array<string>
  /**
   * The Scopes to remove from the Key, if any. Cannot overlap with `addScopes`.
   * @type {Array<string>}
   * @memberof KeyUpdate
   */
  removeScopes?: Array<string>
}

/**
 * Check if a given object implements the KeyUpdate interface.
 */
export function instanceOfKeyUpdate(value: object): value is KeyUpdate {
  return true
}

export function KeyUpdateFromJSON(json: any): KeyUpdate {
  return KeyUpdateFromJSONTyped(json, false)
}

export function KeyUpdateFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): KeyUpdate {
  if (json == null) {
    return json
  }
  return {
    addScopes: json['addScopes'] == null ? undefined : json['addScopes'],
    removeScopes:
      json['removeScopes'] == null ? undefined : json['removeScopes'],
  }
}

export function KeyUpdateToJSON(json: any): KeyUpdate {
  return KeyUpdateToJSONTyped(json, false)
}

export function KeyUpdateToJSONTyped(
  value?: KeyUpdate | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    addScopes: value['addScopes'],
    removeScopes: value['removeScopes'],
  }
}
