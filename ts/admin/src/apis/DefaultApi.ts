/* tslint:disable */
/* eslint-disable */
/**
 * Numeno Article Recommender API
 * ### Admin API  These are the admin APIs, not meant to be used by anyone but Numeno administration tools or the backend of the Numeno dashboard.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@numeno.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
  ErrorResponse,
  HealthCheck,
  KeyInfoFull,
  KeyNew,
  KeyUpdate,
  Keys,
  UserInfo,
  UserNew,
  UserUpdate,
  Users,
} from '../models/index'
import {
  ErrorResponseFromJSON,
  ErrorResponseToJSON,
  HealthCheckFromJSON,
  HealthCheckToJSON,
  KeyInfoFullFromJSON,
  KeyInfoFullToJSON,
  KeyNewFromJSON,
  KeyNewToJSON,
  KeyUpdateFromJSON,
  KeyUpdateToJSON,
  KeysFromJSON,
  KeysToJSON,
  UserInfoFromJSON,
  UserInfoToJSON,
  UserNewFromJSON,
  UserNewToJSON,
  UserUpdateFromJSON,
  UserUpdateToJSON,
  UsersFromJSON,
  UsersToJSON,
} from '../models/index'

export interface CreateUserRequest {
  userNew: UserNew
}

export interface CreateUserKeyRequest {
  userId: string
  keyNew?: KeyNew
}

export interface DeleteUserRequest {
  idOrWebId: string
}

export interface DeleteUserKeyRequest {
  key: string
}

export interface GetKeyRequest {
  key: string
}

export interface GetKeysRequest {
  userId?: string
  cursor?: string
  limit?: number
}

export interface GetUserRequest {
  idOrWebId: string
}

export interface GetUsersRequest {
  cursor?: string
  limit?: number
}

export interface UpdateUserRequest {
  idOrWebId: string
  userUpdate: UserUpdate
}

export interface UpdateUserKeyRequest {
  key: string
  keyUpdate: KeyUpdate
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Create a new user
   */
  async createUserRaw(
    requestParameters: CreateUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserInfo>> {
    if (requestParameters['userNew'] == null) {
      throw new runtime.RequiredError(
        'userNew',
        'Required parameter "userNew" was null or undefined when calling createUser().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Admin-Key'] =
        await this.configuration.apiKey('X-Numeno-Admin-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/users`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: UserNewToJSON(requestParameters['userNew']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserInfoFromJSON(jsonValue),
    )
  }

  /**
   * Create a new user
   */
  async createUser(
    requestParameters: CreateUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserInfo> {
    const response = await this.createUserRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Create a new key for a user
   */
  async createUserKeyRaw(
    requestParameters: CreateUserKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<KeyInfoFull>> {
    if (requestParameters['userId'] == null) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter "userId" was null or undefined when calling createUserKey().',
      )
    }

    const queryParameters: any = {}

    if (requestParameters['userId'] != null) {
      queryParameters['userId'] = requestParameters['userId']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Admin-Key'] =
        await this.configuration.apiKey('X-Numeno-Admin-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/keys`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: KeyNewToJSON(requestParameters['keyNew']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      KeyInfoFullFromJSON(jsonValue),
    )
  }

  /**
   * Create a new key for a user
   */
  async createUserKey(
    requestParameters: CreateUserKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<KeyInfoFull> {
    const response = await this.createUserKeyRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Delete a user
   */
  async deleteUserRaw(
    requestParameters: DeleteUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['idOrWebId'] == null) {
      throw new runtime.RequiredError(
        'idOrWebId',
        'Required parameter "idOrWebId" was null or undefined when calling deleteUser().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Admin-Key'] =
        await this.configuration.apiKey('X-Numeno-Admin-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/users/{idOrWebId}`.replace(
          `{${'idOrWebId'}}`,
          encodeURIComponent(String(requestParameters['idOrWebId'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Delete a user
   */
  async deleteUser(
    requestParameters: DeleteUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteUserRaw(requestParameters, initOverrides)
  }

  /**
   * Delete a key
   */
  async deleteUserKeyRaw(
    requestParameters: DeleteUserKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['key'] == null) {
      throw new runtime.RequiredError(
        'key',
        'Required parameter "key" was null or undefined when calling deleteUserKey().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Admin-Key'] =
        await this.configuration.apiKey('X-Numeno-Admin-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/keys/{key}`.replace(
          `{${'key'}}`,
          encodeURIComponent(String(requestParameters['key'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Delete a key
   */
  async deleteUserKey(
    requestParameters: DeleteUserKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteUserKeyRaw(requestParameters, initOverrides)
  }

  /**
   * Get information about a key
   */
  async getKeyRaw(
    requestParameters: GetKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<KeyInfoFull>> {
    if (requestParameters['key'] == null) {
      throw new runtime.RequiredError(
        'key',
        'Required parameter "key" was null or undefined when calling getKey().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Admin-Key'] =
        await this.configuration.apiKey('X-Numeno-Admin-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/keys/{key}`.replace(
          `{${'key'}}`,
          encodeURIComponent(String(requestParameters['key'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      KeyInfoFullFromJSON(jsonValue),
    )
  }

  /**
   * Get information about a key
   */
  async getKey(
    requestParameters: GetKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<KeyInfoFull> {
    const response = await this.getKeyRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Get all keys, optionally for a user
   */
  async getKeysRaw(
    requestParameters: GetKeysRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Keys>> {
    const queryParameters: any = {}

    if (requestParameters['userId'] != null) {
      queryParameters['userId'] = requestParameters['userId']
    }

    if (requestParameters['cursor'] != null) {
      queryParameters['cursor'] = requestParameters['cursor']
    }

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Admin-Key'] =
        await this.configuration.apiKey('X-Numeno-Admin-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/keys`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      KeysFromJSON(jsonValue),
    )
  }

  /**
   * Get all keys, optionally for a user
   */
  async getKeys(
    requestParameters: GetKeysRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Keys> {
    const response = await this.getKeysRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Get information about a user
   */
  async getUserRaw(
    requestParameters: GetUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserInfo>> {
    if (requestParameters['idOrWebId'] == null) {
      throw new runtime.RequiredError(
        'idOrWebId',
        'Required parameter "idOrWebId" was null or undefined when calling getUser().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Admin-Key'] =
        await this.configuration.apiKey('X-Numeno-Admin-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/users/{idOrWebId}`.replace(
          `{${'idOrWebId'}}`,
          encodeURIComponent(String(requestParameters['idOrWebId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserInfoFromJSON(jsonValue),
    )
  }

  /**
   * Get information about a user
   */
  async getUser(
    requestParameters: GetUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserInfo> {
    const response = await this.getUserRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Get all users
   */
  async getUsersRaw(
    requestParameters: GetUsersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Users>> {
    const queryParameters: any = {}

    if (requestParameters['cursor'] != null) {
      queryParameters['cursor'] = requestParameters['cursor']
    }

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Admin-Key'] =
        await this.configuration.apiKey('X-Numeno-Admin-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/users`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UsersFromJSON(jsonValue),
    )
  }

  /**
   * Get all users
   */
  async getUsers(
    requestParameters: GetUsersRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Users> {
    const response = await this.getUsersRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Check the health of the API
   */
  async healthCheckRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<HealthCheck>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/health`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      HealthCheckFromJSON(jsonValue),
    )
  }

  /**
   * Check the health of the API
   */
  async healthCheck(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<HealthCheck> {
    const response = await this.healthCheckRaw(initOverrides)
    return await response.value()
  }

  /**
   * Update a user
   */
  async updateUserRaw(
    requestParameters: UpdateUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserInfo>> {
    if (requestParameters['idOrWebId'] == null) {
      throw new runtime.RequiredError(
        'idOrWebId',
        'Required parameter "idOrWebId" was null or undefined when calling updateUser().',
      )
    }

    if (requestParameters['userUpdate'] == null) {
      throw new runtime.RequiredError(
        'userUpdate',
        'Required parameter "userUpdate" was null or undefined when calling updateUser().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Admin-Key'] =
        await this.configuration.apiKey('X-Numeno-Admin-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/users/{idOrWebId}`.replace(
          `{${'idOrWebId'}}`,
          encodeURIComponent(String(requestParameters['idOrWebId'])),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UserUpdateToJSON(requestParameters['userUpdate']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserInfoFromJSON(jsonValue),
    )
  }

  /**
   * Update a user
   */
  async updateUser(
    requestParameters: UpdateUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserInfo> {
    const response = await this.updateUserRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Update a key
   */
  async updateUserKeyRaw(
    requestParameters: UpdateUserKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<KeyInfoFull>> {
    if (requestParameters['key'] == null) {
      throw new runtime.RequiredError(
        'key',
        'Required parameter "key" was null or undefined when calling updateUserKey().',
      )
    }

    if (requestParameters['keyUpdate'] == null) {
      throw new runtime.RequiredError(
        'keyUpdate',
        'Required parameter "keyUpdate" was null or undefined when calling updateUserKey().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Admin-Key'] =
        await this.configuration.apiKey('X-Numeno-Admin-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/keys/{key}`.replace(
          `{${'key'}}`,
          encodeURIComponent(String(requestParameters['key'])),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: KeyUpdateToJSON(requestParameters['keyUpdate']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      KeyInfoFullFromJSON(jsonValue),
    )
  }

  /**
   * Update a key
   */
  async updateUserKey(
    requestParameters: UpdateUserKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<KeyInfoFull> {
    const response = await this.updateUserKeyRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }
}
