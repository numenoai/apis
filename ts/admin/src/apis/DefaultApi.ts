/* tslint:disable */
/* eslint-disable */
/**
 * Numeno Admin API
 * ## Introduction  Use the Numeno Administration API to create API Keys and set their permissions (which we call Scopes). This API is meant to be used by administrators of your organization.  ## Scopes  Scopes are used to let API Keys access only certain parts of the API.  Scopes are expressed as a string of the form `api:resource:action`.  For example, from the Numeno Article Recommender API (`art-rec`):   - `art-rec:feeds:read` - can read any Feed (eg. `GET` `/feeds`, `/feeds/:id`, `/feeds/:id/streams`, etc.)   - `art-rec:feeds:write` - can write (and read) any Feed   - `art-rec:feeds:*` - can perform any action on Feeds   - `art-rec:*:read` - can read any resource on `art-rec`   - `*:*:*` - can do everything
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@numeno.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
  ErrorResponse,
  HealthCheck,
  KeyInfoFull,
  KeyInfoList,
  KeyNew,
  KeyUpdate,
  Scopes,
} from '../models/index'
import {
  ErrorResponseFromJSON,
  ErrorResponseToJSON,
  HealthCheckFromJSON,
  HealthCheckToJSON,
  KeyInfoFullFromJSON,
  KeyInfoFullToJSON,
  KeyInfoListFromJSON,
  KeyInfoListToJSON,
  KeyNewFromJSON,
  KeyNewToJSON,
  KeyUpdateFromJSON,
  KeyUpdateToJSON,
  ScopesFromJSON,
  ScopesToJSON,
} from '../models/index'

export interface CreateKeyRequest {
  keyNew?: KeyNew
}

export interface DeleteKeyRequest {
  key: string
}

export interface GetKeyRequest {
  key: string
}

export interface GetKeysRequest {
  cursor?: string
  limit?: number
}

export interface UpdateKeyRequest {
  key: string
  keyUpdate: KeyUpdate
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Create a new Key and give it access to one or more Scopes from the various Numeno APIs.  Scopes are expressed as a string of the form `api:resource:action`: - `art-rec:feeds:read` - can read any Feed (eg. `GET` `/feeds`, `/feeds/:id`, `/feeds/:id/streams`, etc.) - `art-rec:feeds:write` - can write (and read) any Feed - `art-rec:feeds:*` - can perform any action on Feeds - `art-rec:*:read` - can read any resource on `art-rec` - `*:*:*` - can do everything
   * Create a new Key for your organization
   */
  async createKeyRaw(
    requestParameters: CreateKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<KeyInfoFull>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Key'] =
        await this.configuration.apiKey('X-Numeno-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/keys`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: KeyNewToJSON(requestParameters['keyNew']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      KeyInfoFullFromJSON(jsonValue),
    )
  }

  /**
   * Create a new Key and give it access to one or more Scopes from the various Numeno APIs.  Scopes are expressed as a string of the form `api:resource:action`: - `art-rec:feeds:read` - can read any Feed (eg. `GET` `/feeds`, `/feeds/:id`, `/feeds/:id/streams`, etc.) - `art-rec:feeds:write` - can write (and read) any Feed - `art-rec:feeds:*` - can perform any action on Feeds - `art-rec:*:read` - can read any resource on `art-rec` - `*:*:*` - can do everything
   * Create a new Key for your organization
   */
  async createKey(
    requestParameters: CreateKeyRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<KeyInfoFull> {
    const response = await this.createKeyRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Permanently delete a specific API Key.
   * Delete a Key
   */
  async deleteKeyRaw(
    requestParameters: DeleteKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['key'] == null) {
      throw new runtime.RequiredError(
        'key',
        'Required parameter "key" was null or undefined when calling deleteKey().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Key'] =
        await this.configuration.apiKey('X-Numeno-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/keys/{key}`.replace(
          `{${'key'}}`,
          encodeURIComponent(String(requestParameters['key'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Permanently delete a specific API Key.
   * Delete a Key
   */
  async deleteKey(
    requestParameters: DeleteKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteKeyRaw(requestParameters, initOverrides)
  }

  /**
   * Call this endpoint to get information about Key, inculding when it was created, last updated, and the set of Scopes it has access to.  Scopes are expressed as a string of the form `api:resource:action`: - `art-rec:feeds:read` - can read any Feed (eg. `GET` `/feeds`, `/feeds/:id`, `/feeds/:id/streams`, etc.) - `art-rec:feeds:write` - can write (and read) any Feed - `art-rec:feeds:*` - can perform any action on Feeds - `art-rec:*:read` - can read any resource on `art-rec` - `*:*:*` - can do everything
   * Get detailed info about a Key
   */
  async getKeyRaw(
    requestParameters: GetKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<KeyInfoFull>> {
    if (requestParameters['key'] == null) {
      throw new runtime.RequiredError(
        'key',
        'Required parameter "key" was null or undefined when calling getKey().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Key'] =
        await this.configuration.apiKey('X-Numeno-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/keys/{key}`.replace(
          `{${'key'}}`,
          encodeURIComponent(String(requestParameters['key'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      KeyInfoFullFromJSON(jsonValue),
    )
  }

  /**
   * Call this endpoint to get information about Key, inculding when it was created, last updated, and the set of Scopes it has access to.  Scopes are expressed as a string of the form `api:resource:action`: - `art-rec:feeds:read` - can read any Feed (eg. `GET` `/feeds`, `/feeds/:id`, `/feeds/:id/streams`, etc.) - `art-rec:feeds:write` - can write (and read) any Feed - `art-rec:feeds:*` - can perform any action on Feeds - `art-rec:*:read` - can read any resource on `art-rec` - `*:*:*` - can do everything
   * Get detailed info about a Key
   */
  async getKey(
    requestParameters: GetKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<KeyInfoFull> {
    const response = await this.getKeyRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * This endpoint returns a list of all Keys your organization has created.
   * Get a list of all Keys for your organization
   */
  async getKeysRaw(
    requestParameters: GetKeysRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<KeyInfoList>> {
    const queryParameters: any = {}

    if (requestParameters['cursor'] != null) {
      queryParameters['cursor'] = requestParameters['cursor']
    }

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Key'] =
        await this.configuration.apiKey('X-Numeno-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/keys`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      KeyInfoListFromJSON(jsonValue),
    )
  }

  /**
   * This endpoint returns a list of all Keys your organization has created.
   * Get a list of all Keys for your organization
   */
  async getKeys(
    requestParameters: GetKeysRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<KeyInfoList> {
    const response = await this.getKeysRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Get a list of all the Scopes supported by the Numeno Admin API. Scopes are used to let API Keys access only certain parts of the API.  Scopes are expressed as a string of the form `api:resource:action`: - `admin:keys:read` - can read any Key (eg. `GET` `/keys`, `/keys/:id`, etc.) - `admin:keys:write` - can write (and read) any Key - `admin:keys:*` - can perform any action on Keys - `admin:*:read` - can read any resource on `admin` - `*:*:*` - can do everything
   * Get the Scopes for this API
   */
  async getScopesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Scopes>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/v1/scopes`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ScopesFromJSON(jsonValue),
    )
  }

  /**
   * Get a list of all the Scopes supported by the Numeno Admin API. Scopes are used to let API Keys access only certain parts of the API.  Scopes are expressed as a string of the form `api:resource:action`: - `admin:keys:read` - can read any Key (eg. `GET` `/keys`, `/keys/:id`, etc.) - `admin:keys:write` - can write (and read) any Key - `admin:keys:*` - can perform any action on Keys - `admin:*:read` - can read any resource on `admin` - `*:*:*` - can do everything
   * Get the Scopes for this API
   */
  async getScopes(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Scopes> {
    const response = await this.getScopesRaw(initOverrides)
    return await response.value()
  }

  /**
   * A health check endpoint. Returns a code indicating the health of the Admin service.
   * Check the health of the API
   */
  async healthCheckRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<HealthCheck>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/health`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      HealthCheckFromJSON(jsonValue),
    )
  }

  /**
   * A health check endpoint. Returns a code indicating the health of the Admin service.
   * Check the health of the API
   */
  async healthCheck(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<HealthCheck> {
    const response = await this.healthCheckRaw(initOverrides)
    return await response.value()
  }

  /**
   * Update the set of Scopes a the specified Key has access to.  Scopes are expressed as a string of the form `api:resource:action`: - `art-rec:feeds:read` - can read any Feed (eg. `GET` `/feeds`, `/feeds/:id`, `/feeds/:id/streams`, etc.) - `art-rec:feeds:write` - can write (and read) any Feed - `art-rec:feeds:*` - can perform any action on Feeds - `art-rec:*:read` - can read any resource on `art-rec` - `*:*:*` - can do everything
   * Update a Key
   */
  async updateKeyRaw(
    requestParameters: UpdateKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<KeyInfoFull>> {
    if (requestParameters['key'] == null) {
      throw new runtime.RequiredError(
        'key',
        'Required parameter "key" was null or undefined when calling updateKey().',
      )
    }

    if (requestParameters['keyUpdate'] == null) {
      throw new runtime.RequiredError(
        'keyUpdate',
        'Required parameter "keyUpdate" was null or undefined when calling updateKey().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Key'] =
        await this.configuration.apiKey('X-Numeno-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/keys/{key}`.replace(
          `{${'key'}}`,
          encodeURIComponent(String(requestParameters['key'])),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: KeyUpdateToJSON(requestParameters['keyUpdate']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      KeyInfoFullFromJSON(jsonValue),
    )
  }

  /**
   * Update the set of Scopes a the specified Key has access to.  Scopes are expressed as a string of the form `api:resource:action`: - `art-rec:feeds:read` - can read any Feed (eg. `GET` `/feeds`, `/feeds/:id`, `/feeds/:id/streams`, etc.) - `art-rec:feeds:write` - can write (and read) any Feed - `art-rec:feeds:*` - can perform any action on Feeds - `art-rec:*:read` - can read any resource on `art-rec` - `*:*:*` - can do everything
   * Update a Key
   */
  async updateKey(
    requestParameters: UpdateKeyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<KeyInfoFull> {
    const response = await this.updateKeyRaw(requestParameters, initOverrides)
    return await response.value()
  }
}
