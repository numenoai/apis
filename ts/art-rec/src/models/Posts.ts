/* tslint:disable */
/* eslint-disable */
/**
 * Numeno Article Recommender API
 * ### Introduction  Use the Numeno Article Recommender API to get personalized article recommendations in three easy steps:  1. Define a Persona: Simply provide a description of your interests, vibe, and target audience.  2. Associate the Persona with a Feed.  3. Pull from the Feed to receive a curated selection of articles from across the web.  ### Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/), allowing cross-domain communication from the browser. All responses have a wildcard same-origin policy which makes them accessible from any code on any site.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@numeno.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { Article } from './Article'
import {
  ArticleFromJSON,
  ArticleFromJSONTyped,
  ArticleToJSON,
  ArticleToJSONTyped,
} from './Article'

/**
 * A set of posts for a given feed.
 * @export
 * @interface Posts
 */
export interface Posts {
  /**
   * A list of articles
   * @type {Array<Article>}
   * @memberof Posts
   */
  feed?: Array<Article>
  /**
   * Next page of data, used in subsequent feed/getposts calls
   * @type {string}
   * @memberof Posts
   */
  cursor?: string
}

/**
 * Check if a given object implements the Posts interface.
 */
export function instanceOfPosts(value: object): value is Posts {
  return true
}

export function PostsFromJSON(json: any): Posts {
  return PostsFromJSONTyped(json, false)
}

export function PostsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Posts {
  if (json == null) {
    return json
  }
  return {
    feed:
      json['feed'] == null
        ? undefined
        : (json['feed'] as Array<any>).map(ArticleFromJSON),
    cursor: json['cursor'] == null ? undefined : json['cursor'],
  }
}

export function PostsToJSON(json: any): Posts {
  return PostsToJSONTyped(json, false)
}

export function PostsToJSONTyped(
  value?: Posts | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    feed:
      value['feed'] == null
        ? undefined
        : (value['feed'] as Array<any>).map(ArticleToJSON),
    cursor: value['cursor'],
  }
}
