/* tslint:disable */
/* eslint-disable */
/**
 * Numeno Article Recommender API
 * ### Introduction  Use the Numeno Article Recommender API to get personalized article recommendations in three easy steps:  1. Define a Persona: Simply provide a description of your interests, vibe, and target audience.  2. Associate the Persona with a Feed.  3. Pull from the Feed to receive a curated selection of articles from across the web.  ### Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/), allowing cross-domain communication from the browser. All responses have a wildcard same-origin policy which makes them accessible from any code on any site.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@numeno.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
/**
 * A block of natural-language text used to configure an aspect of Numeno. In the case of the Article Recommender API, the Persona describes your interests, vibe and target audience, so that the API can produce a curated selection of articles from across the web. To create a new feed, simply create a new Persona.
 *
 * @export
 * @interface Persona
 */
export interface Persona {
  /**
   * The unique ID of the Persona
   * @type {string}
   * @memberof Persona
   */
  id: string
  /**
   * The name of the Persona for easy reference
   * @type {string}
   * @memberof Persona
   */
  name: string
  /**
   * The natural-language body of the Persona
   * @type {string}
   * @memberof Persona
   */
  body: string
  /**
   * The date the key was created in ISO 8601 datetime
   * @type {Date}
   * @memberof Persona
   */
  createdAt?: Date
  /**
   * The date the key was last modified in ISO 8601 datetime
   * @type {Date}
   * @memberof Persona
   */
  modifiedAt?: Date
}

/**
 * Check if a given object implements the Persona interface.
 */
export function instanceOfPersona(value: object): value is Persona {
  if (!('id' in value) || value['id'] === undefined) return false
  if (!('name' in value) || value['name'] === undefined) return false
  if (!('body' in value) || value['body'] === undefined) return false
  return true
}

export function PersonaFromJSON(json: any): Persona {
  return PersonaFromJSONTyped(json, false)
}

export function PersonaFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Persona {
  if (json == null) {
    return json
  }
  return {
    id: json['id'],
    name: json['name'],
    body: json['body'],
    createdAt:
      json['createdAt'] == null ? undefined : new Date(json['createdAt']),
    modifiedAt:
      json['modifiedAt'] == null ? undefined : new Date(json['modifiedAt']),
  }
}

export function PersonaToJSON(json: any): Persona {
  return PersonaToJSONTyped(json, false)
}

export function PersonaToJSONTyped(
  value?: Persona | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value
  }

  return {
    id: value['id'],
    name: value['name'],
    body: value['body'],
    createdAt:
      value['createdAt'] == null ? undefined : value['createdAt'].toISOString(),
    modifiedAt:
      value['modifiedAt'] == null
        ? undefined
        : value['modifiedAt'].toISOString(),
  }
}
