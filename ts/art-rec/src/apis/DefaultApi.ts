/* tslint:disable */
/* eslint-disable */
/**
 * Numeno Article Recommender API
 * ### Introduction  Use the Numeno Article Recommender API to get personalized article recommendations in three easy steps:  1. Define a Persona: Simply provide a description of your interests, vibe, and target audience.  2. Associate the Persona with a Feed.  3. Pull from the Feed to receive a curated selection of articles from across the web.  ### Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/), allowing cross-domain communication from the browser. All responses have a wildcard same-origin policy which makes them accessible from any code on any site.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@numeno.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
  ErrorResponse,
  Feed,
  FeedNew,
  FeedUpdate,
  Feeds,
  HealthCheck,
} from '../models/index'
import {
  ErrorResponseFromJSON,
  ErrorResponseToJSON,
  FeedFromJSON,
  FeedToJSON,
  FeedNewFromJSON,
  FeedNewToJSON,
  FeedUpdateFromJSON,
  FeedUpdateToJSON,
  FeedsFromJSON,
  FeedsToJSON,
  HealthCheckFromJSON,
  HealthCheckToJSON,
} from '../models/index'

export interface CreateFeedRequest {
  feedNew: FeedNew
}

export interface DeleteFeedRequest {
  feedId: string
}

export interface GetFeedByIdRequest {
  feedId: string
}

export interface GetFeedsRequest {
  cursor?: string
  limit?: number
}

export interface UpdateFeedRequest {
  feedId: string
  feedUpdate: FeedUpdate
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Create a new feed
   */
  async createFeedRaw(
    requestParameters: CreateFeedRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Feed>> {
    if (requestParameters['feedNew'] == null) {
      throw new runtime.RequiredError(
        'feedNew',
        'Required parameter "feedNew" was null or undefined when calling createFeed().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Key'] =
        await this.configuration.apiKey('X-Numeno-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/feeds`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: FeedNewToJSON(requestParameters['feedNew']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FeedFromJSON(jsonValue),
    )
  }

  /**
   * Create a new feed
   */
  async createFeed(
    requestParameters: CreateFeedRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Feed> {
    const response = await this.createFeedRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Delete a feed by ID
   */
  async deleteFeedRaw(
    requestParameters: DeleteFeedRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['feedId'] == null) {
      throw new runtime.RequiredError(
        'feedId',
        'Required parameter "feedId" was null or undefined when calling deleteFeed().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Key'] =
        await this.configuration.apiKey('X-Numeno-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/feeds/{feedId}`.replace(
          `{${'feedId'}}`,
          encodeURIComponent(String(requestParameters['feedId'])),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.VoidApiResponse(response)
  }

  /**
   * Delete a feed by ID
   */
  async deleteFeed(
    requestParameters: DeleteFeedRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.deleteFeedRaw(requestParameters, initOverrides)
  }

  /**
   * Get a specific feed by ID
   */
  async getFeedByIdRaw(
    requestParameters: GetFeedByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Feed>> {
    if (requestParameters['feedId'] == null) {
      throw new runtime.RequiredError(
        'feedId',
        'Required parameter "feedId" was null or undefined when calling getFeedById().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Key'] =
        await this.configuration.apiKey('X-Numeno-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/feeds/{feedId}`.replace(
          `{${'feedId'}}`,
          encodeURIComponent(String(requestParameters['feedId'])),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FeedFromJSON(jsonValue),
    )
  }

  /**
   * Get a specific feed by ID
   */
  async getFeedById(
    requestParameters: GetFeedByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Feed> {
    const response = await this.getFeedByIdRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Get a list of all feeds
   */
  async getFeedsRaw(
    requestParameters: GetFeedsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Feeds>> {
    const queryParameters: any = {}

    if (requestParameters['cursor'] != null) {
      queryParameters['cursor'] = requestParameters['cursor']
    }

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Key'] =
        await this.configuration.apiKey('X-Numeno-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/feeds`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FeedsFromJSON(jsonValue),
    )
  }

  /**
   * Get a list of all feeds
   */
  async getFeeds(
    requestParameters: GetFeedsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Feeds> {
    const response = await this.getFeedsRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Check the health of the API
   */
  async healthCheckRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<HealthCheck>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/health`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      HealthCheckFromJSON(jsonValue),
    )
  }

  /**
   * Check the health of the API
   */
  async healthCheck(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<HealthCheck> {
    const response = await this.healthCheckRaw(initOverrides)
    return await response.value()
  }

  /**
   * Update a feed by ID
   */
  async updateFeedRaw(
    requestParameters: UpdateFeedRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Feed>> {
    if (requestParameters['feedId'] == null) {
      throw new runtime.RequiredError(
        'feedId',
        'Required parameter "feedId" was null or undefined when calling updateFeed().',
      )
    }

    if (requestParameters['feedUpdate'] == null) {
      throw new runtime.RequiredError(
        'feedUpdate',
        'Required parameter "feedUpdate" was null or undefined when calling updateFeed().',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Numeno-Key'] =
        await this.configuration.apiKey('X-Numeno-Key') // ApiKeyAuth authentication
    }

    const response = await this.request(
      {
        path: `/v1/feeds/{feedId}`.replace(
          `{${'feedId'}}`,
          encodeURIComponent(String(requestParameters['feedId'])),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: FeedUpdateToJSON(requestParameters['feedUpdate']),
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      FeedFromJSON(jsonValue),
    )
  }

  /**
   * Update a feed by ID
   */
  async updateFeed(
    requestParameters: UpdateFeedRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Feed> {
    const response = await this.updateFeedRaw(requestParameters, initOverrides)
    return await response.value()
  }
}
